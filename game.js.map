{"version":3,"sources":["js/app.js"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["// String.prototype.padStart() polyfill\r\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\r\nif (!String.prototype.padStart) {\r\n    String.prototype.padStart = function padStart(targetLength,padString) {\r\n        targetLength = targetLength>>0; //truncate if number or convert non-number to 0;\r\n        padString = String((typeof padString !== 'undefined' ? padString : ' '));\r\n        if (this.length > targetLength) {\r\n            return String(this);\r\n        }\r\n        else {\r\n            targetLength = targetLength-this.length;\r\n            if (targetLength > padString.length) {\r\n                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed\r\n            }\r\n            return padString.slice(0,targetLength) + String(this);\r\n        }\r\n    };\r\n}\r\n\r\n/*\r\n * Create a list that holds all of your cards\r\n */\r\nlet cards = [\r\n  'diamond',\r\n  'paper-plane-o',\r\n  'anchor',\r\n  'bicycle',\r\n  'cube',\r\n  'leaf',\r\n  'bomb',\r\n  'diamond',\r\n  'paper-plane-o',\r\n  'anchor',\r\n  'bicycle',\r\n  'cube',\r\n  'leaf',\r\n  'bomb',\r\n  'bolt',\r\n  'bolt'\r\n];\r\n\r\n/*\r\n * Display the cards on the page\r\n *   - shuffle the list of cards using the provided \"shuffle\" method below\r\n *   - loop through each card and create its HTML\r\n *   - add each card's HTML to the page\r\n */\r\n\r\nconst deck = document.querySelector('.deck');\r\ncreateDeck();\r\n\r\nfunction createDeck() {\r\n  // shuffle cards\r\n  cards = shuffle(cards);\r\n\r\n  const tempDeck = document.createDocumentFragment();\r\n\r\n  // create card HTML for each card\r\n  cards.forEach(card => {\r\n    const li = document.createElement('li');\r\n    li.classList.add('card', 'flipper');\r\n\r\n    li.innerHTML = `\r\n      <div class=\"front\"></div>\r\n      <div class=\"back\">\r\n        <i class=\"fa fa-${card}\" data-card=\"${card}\"></i>\r\n      </div>\r\n      `;\r\n    tempDeck.appendChild(li);\r\n  });\r\n\r\n  // add cards to deck\r\n  deck.appendChild(tempDeck);\r\n}\r\n\r\n// Shuffle function from http://stackoverflow.com/a/2450976\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n/**** Gameplay *****/\r\n\r\nlet openCard = null,\r\n  matchedCards = [],\r\n  // flag to know when to throttle clicks\r\n  flippingIsPaused = false,\r\n  timerId,\r\n  start,\r\n  moves = 0,\r\n  hardDifficulty = false,\r\n  restartingGame = false;\r\n\r\nconst stars = document.querySelector('.stars'),\r\n  [bronze, silver, gold] = stars.children,\r\n  fieldset = document.querySelector('fieldset'),\r\n  hour = document.querySelector('.hour'),\r\n  minute = document.querySelector('.minute'),\r\n  second = document.querySelector('.second'),\r\n  moveCounter = document.querySelector('.moves');\r\n\r\ndeck.addEventListener('click', event => {\r\n  const { target } = event;\r\n\r\n  // exit if click is not from the front of a card\r\n  if (!target.matches('div.front')) return;\r\n\r\n  // exit if checking for match\r\n  if (flippingIsPaused) return;\r\n\r\n  if (moves === 0) {\r\n    // start timer when first card is flipped\r\n    start = Math.floor(Date.now() / 1000);\r\n    timerId = setInterval(() => {\r\n      const now = Math.floor(Date.now() / 1000);\r\n      let diff = now - start;\r\n      const curHour = Math.floor(diff / 3600);\r\n\r\n      // new diff is the remaining seconds\r\n      diff = diff % 3600;\r\n\r\n      const curMin = Math.floor(diff / 60);\r\n      const curSec = diff % 60;\r\n      updateTimer(curHour, curMin, curSec);\r\n    }, 1000);\r\n\r\n    // deactivate the difficulty selector\r\n    fieldset.setAttribute('disabled', 'true');\r\n  }\r\n\r\n  // increment moves\r\n  updateMoveCounter();\r\n\r\n  // update stars if necessary\r\n  const goldThreshold = hardDifficulty ? 56 : 28;\r\n  const silverThreshold = hardDifficulty ? 74 : 32;\r\n\r\n  if (moves > silverThreshold) {\r\n    // bronze\r\n    stars.classList.add('bronze');\r\n  } else if (moves > goldThreshold) {\r\n    // silver\r\n    stars.classList.add('silver');\r\n  }\r\n\r\n  target.parentElement.classList.add('flip');\r\n  const back = target.nextElementSibling;\r\n\r\n  if (!cardIsOpen()) {\r\n    // add this card and exit\r\n    openCard = back;\r\n    return;\r\n  }\r\n\r\n  flippingIsPaused = true;\r\n  const { card } = back.firstElementChild.dataset;\r\n  if (card === openCard.firstElementChild.dataset.card) {\r\n    // we have a match\r\n    [openCard, back].forEach(card => {\r\n      card.classList.add('match');\r\n    });\r\n    matchedCards.push(openCard, back);\r\n\r\n    flippingIsPaused = false;\r\n\r\n    if (matchedCards.length > 15) {\r\n      // stop timer\r\n      clearInterval(timerId);\r\n\r\n      // assign necessary metrics to congrats modal\r\n      const [difficulty, rating, finalMoves, time] = [...document.querySelectorAll('.metric-value')];\r\n      difficulty.textContent = hardDifficulty ? 'HARD' : 'EASY';\r\n      // for stars, show the same content and display from score panel\r\n      // outerHTML contains the <ul> tag for the list\r\n      rating.innerHTML = stars.outerHTML;\r\n      finalMoves.textContent = moves;\r\n      // for time, show the same content/display from score panel\r\n      // innerHTML contains the relevant info\r\n      time.innerHTML = document.querySelector('.time-display').innerHTML;\r\n\r\n      // display the modal\r\n      document.querySelector('.overlay').classList.add('shown');\r\n    }\r\n  } else {\r\n    // no match\r\n    const tempOpenCard = openCard; // openCard will be null inside timeout callback\r\n    // delay card reset for 1 second\r\n    setTimeout(() => {\r\n      const cardsToReset = [tempOpenCard, back];\r\n      if (hardDifficulty) {\r\n        cardsToReset.push(...matchedCards);\r\n        matchedCards = [];\r\n      }\r\n      cardsToReset.forEach(resetFlippedCard);\r\n      flippingIsPaused = false;\r\n    }, 1000);\r\n  }\r\n\r\n  // empty the open card variable\r\n  openCard = null;\r\n});\r\n\r\nfunction updateTimer(...args) {\r\n  const [hours, minutes, seconds] = generateTimeString(args);\r\n  hour.textContent = hours;\r\n  minute.textContent = minutes;\r\n  second.textContent = seconds;\r\n}\r\n\r\nfunction generateTimeString(timeArr) {\r\n  return timeArr.map(timeElement => String(timeElement).padStart(2, '0'));\r\n}\r\n\r\nfunction updateMoveCounter(toZero = false) {\r\n  moves = !toZero ? ++moves : 0;\r\n  moveCounter.textContent = moves;\r\n}\r\n\r\nfunction cardIsOpen() {\r\n  return openCard instanceof Element;\r\n}\r\n\r\nfunction resetFlippedCard(card, index, origArray) {\r\n  if (index === origArray.length - 1 && restartingGame) {\r\n    // this is the last card being flipped when the game is being reset\r\n    // so recreate the deck after it has flipped\r\n    card.parentElement.addEventListener('transitionend', recreateDeck);\r\n  }\r\n  card.parentElement.classList.remove('flip');\r\n  card.classList.remove('match');\r\n}\r\n\r\nfunction recreateDeck(event = null) {\r\n  /*\r\n   * idea gotten from Udacity JS performance guide\r\n   * manipulating the deck while it's hidden gives a performance gain\r\n   * (backed up by performance.now() data)\r\n   */\r\n  // first hide the deck\r\n  deck.style.display = 'none';\r\n  // remove all cards\r\n  [...deck.children].forEach(card => deck.removeChild(card));\r\n  // create a new arrangement\r\n  createDeck();\r\n  // show new deck\r\n  // an empty string will reset the style value to the default\r\n  // see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style#Setting_styles\r\n  deck.style.display = '';\r\n\r\n  // reactivate the difficulty selector\r\n  fieldset.removeAttribute('disabled');\r\n\r\n  restartingGame = false;\r\n  flippingIsPaused = false;\r\n\r\n  if (event) {\r\n    // recreateDeck() was invoked as an event listener\r\n    // remove it to prevent firing at the wrong time\r\n    event.target.removeEventListener('transitionend', recreateDeck);\r\n  }\r\n}\r\n\r\n// select difficulty\r\nfieldset.addEventListener('change', event => {\r\n  const { target } = event;\r\n\r\n  // exit if selection didn't change\r\n  if (target.tagName !== 'INPUT') return;\r\n\r\n  hardDifficulty = target.value === 'hard' ? true : false;\r\n});\r\n\r\n// restart the game\r\nconst restartBtn = document.querySelector('.restart');\r\nrestartBtn.addEventListener('click', event => {\r\n  // game has not started\r\n  if (moves < 1) return;\r\n\r\n  restartingGame = true;\r\n  flippingIsPaused = true;\r\n\r\n  // reset move counter\r\n  updateMoveCounter(true);\r\n\r\n  // reset timer\r\n  clearInterval(timerId);\r\n  updateTimer(0, 0, 0);\r\n\r\n  // reset stars\r\n  stars.classList.remove('bronze', 'silver');\r\n\r\n  // reset open cards\r\n  const cardsToReset = [...matchedCards];\r\n\r\n  // final card is always a matched card\r\n  if (cardIsOpen()) cardsToReset.unshift(openCard);\r\n\r\n  if (cardsToReset.length < 1) {\r\n    // no matched or open cards but player has seen some cards already\r\n    // resetFlippedCard() will never be invoked, and consequently recreateDeck() too\r\n    // resetFlippedCard() doesn't need to invoked, but recreateDeck() must be\r\n    // no argument is passed because no need to remove event listener\r\n    recreateDeck();\r\n  } else {\r\n    cardsToReset.forEach(resetFlippedCard);\r\n  }\r\n\r\n  openCard = null;\r\n  matchedCards = [];\r\n});\r\n\r\n// hide congrats modal\r\nconst overlay = document.querySelector('.overlay');\r\noverlay.addEventListener('click', event => {\r\n  if (event.target.matches('section.overlay.shown')) hideModal(event.target);\r\n});\r\n\r\nfunction hideModal(overlay) {\r\n  overlay.classList.remove('shown');\r\n}\r\n\r\n/* Display introductory guide using IntroJS library */\r\n\r\nconst intro = introJs();\r\n\r\n// intro tooltips and settings\r\nintro.setOptions({\r\n  steps: [\r\n    {\r\n      element: 'h1',\r\n      intro: 'Hello and welcome to the Memory Game!'\r\n    },\r\n    {\r\n      element: 'form',\r\n      intro: 'Always choose a difficulty <strong><em>before</em></strong> making your first move.'\r\n    },\r\n    {\r\n      element: restartBtn,\r\n      intro: `Clicking this button will restart the game.\r\n        No need for that... <em>yet</em>. 😉`\r\n    },\r\n    {\r\n      element: '.score-panel',\r\n      intro: 'Keep track of your performance with these metrics.'\r\n    },\r\n    {\r\n      element: deck,\r\n      intro: `Now you're ready!<br>\r\n        Click any card get to started.<br>\r\n        Then click another card to see if you found a match... 🤞.<br>\r\n        Find all the matches to win. Good luck!`\r\n    }\r\n  ],\r\n  hidePrev: true,\r\n  hideNext: true,\r\n  tooltipPosition: 'auto',\r\n  scrollTo: 'tooltip',\r\n\r\n  // for hints\r\n  hints: [\r\n    {\r\n      hint: 'Click this button to restart the game.',\r\n      element: '.fa-repeat'\r\n    }\r\n  ]\r\n});\r\n\r\n// show guide after page and JS have loaded\r\nintro.start();\r\n\r\nconst closeModalBtn = document.querySelector('.button[name=\"close\"]');\r\n// invoke a click on the background so the modal is dismissed\r\ncloseModalBtn.addEventListener('click', event => {\r\n  overlay.click();\r\n  intro.showHints();\r\n});\r\n\r\nconst modalRestartBtn = document.querySelector('.button[name=\"restart\"]');\r\nmodalRestartBtn.addEventListener('click', event => {\r\n  // invoke a click on the background so the modal is dismissed\r\n  overlay.click();\r\n  // invoke a click on the actual restart button so the grid & game reset\r\n  restartBtn.click();\r\n});\r\n"]}